#!/usr/bin/env python3

import sys
from pathlib import Path
import pickle
import os
import re


""" Define location db-file"""
db_location = str(Path.home()) + '/.local/share/template-generator/'
""" Define location of templates """
template_location = str(Path.home()) + '/templates/'
""" Define location of config file """
config_location = str(Path.home()) + '/.config/template-generator/'

""" Define db-file name """
db_name = 'templates.dat'
""" Define config file name """
config_name = 'config'

""" List of items, to be stored in db-file """
items = []

# TODO: lookup how to store objects in db-file OR create to_string for text-based storage (??How to read??).
class Template:
    """ A class definition for each template, which is stored in db-file."""


    def __init__(self, name: str, arguments):
        self.name = name
        self.arguments = arguments


    def __eq__(self, other):
        """ Override default equality """
        if isinstance(other, Template):
            if other.name != self.name:
                return False
            if len(other.arguments) != len(self.arguments):
                return False
            else:
                for i in range(len(other.arguments)):
                    if other.arguments[i] != self.arguments[i]:
                        return False
            return True
        return False


    def __str__(self):
        output_str = self.name + ": "
        for i in range(len(self.arguments)):
            if len(self.arguments) == i + 1:
                output_str += self.arguments[i]
            else:
                output_str += self.arguments[i] + ", "
        return output_str


def add_item(name: str, arguments):
    if duplicate_template(Template(name, arguments)):
        raise Exception("Template " + name + " is already in the datafile.")
    else:
        items.append(Template(name, arguments))
        print("Template " + name + " has been added to the datafile.")


def duplicate_template(template):
    for item in items:
        if (item == template):
            return True
    return False


def list_items():
    for item in items:
        print(item)


def print_usage():
    print()
    print("Usage: gen_template <argument>\n"
          "\n"
          "-g   --generate <template> <arguments>       -- Generate a new template.\n"
          "-l   --list                                  -- List all templates.\n"
          "-la  --list-arguments <template>             -- List possible arguments for given template.\n"
          "-o   --output                                -- The output filename, standard out by default.\n"
          "\n"
          "-h   --help                                  -- Display this help message.\n"
          "-v   --version                               -- Display version info.\n"
          "-u   --update                                -- Update template database.\n")


def print_version():
    print(  "gen_template 1.0.0\n"
            "Copyright (C) 2019 Stef Tweepenninckx\n"
    )


def update_database():
    with open(config_location + config_name, 'r') as template_list:
        line = template_list.readline().rstrip()
        template_name = re.compile("^\[.+\]$")
        template_end = "end"
        new_template = []
        while line:
            if template_name.match(line) is not None:
                new_template.append(line.replace('[','').replace(']',''))
            elif line == "end":
                if len(new_template) > 1:
                    name = new_template[0]
                    arguments = new_template[1:]
                    try:
                        add_item(name, arguments)
                    except Exception as e:
                        print(e)
                    new_template = []
                elif len(new_template) == 1:
                    try:
                        add_item(new_template[0], [])
                        new_template = []
                    except Exception as e:
                        print(e)
            else:
                new_template.append(line)
            line = template_list.readline().rstrip()


def generate():
    """ Hard-coded version for now, will be improved later on """
    if sys.argv[2] == "notes":
        author = sys.argv[3]
        title = sys.argv[4]
        print(author, title)
        with open(template_location + sys.argv[2] + ".ms", 'rt') as in_file:
            with open(sys.argv[2] + ".ms", 'wt') as out_file:
                for line in in_file:
                    out_file.write(line.replace('*AUTHOR', author).replace('*TITLE', title))
    elif sys.argv[2] == "latex":
        author = sys.argv[3]
        title = sys.argv[4]
        subtitle = sys.argv[5]
        date = sys.argv[6]
        with open(template_location + sys.argv[2] + ".tex", 'rt') as in_file:
            with open(sys.argv[2] + ".tex", 'wt') as out_file:
                for line in in_file:
                    out_file.write(line.replace('*AUTHOR', author).replace('*TITLE', title)
                    .replace('*SUBTITLE', subtitle).replace('*DATE', date))
    elif sys.argv[2] == "school_doc":
        with open(template_location + sys.argv[2] + ".docx", 'rb') as in_file:
            with open(sys.argv[2] + ".docx", 'wb' ) as out_file:
                for line in in_file:
                    out_file.write(line)
    elif sys.argv[2] == "school_ppt":
        with open(template_location + sys.argv[2] + ".pptx", 'rb') as in_file:
            with open(sys.argv[2] + ".pptx", 'wb' ) as out_file:
                for line in in_file:
                    out_file.write(line)


if __name__ == '__main__':
    Path(config_location).mkdir(parents=True, exist_ok=True)
    Path(db_location).mkdir(parents=True, exist_ok=True)
    try:
        with open(db_location + db_name, 'rb') as f:
            items = pickle.load(f)
    except:
        pass

    if len(sys.argv) <= 1:
        print_usage()
    elif sys.argv[1] == '-h' or sys.argv[1] == '--help':
        print_usage()
    elif sys.argv[1] == '-v' or sys.argv[1] == '--version':
        print_version()
    elif sys.argv[1] == '-g' or sys.argv[1] == '--generate':
        generate()
        # TODO: integrate -o option (check if sys.argv contains -o, cuz len(arguments) can differ)
    elif sys.argv[1] == '-l' or sys.argv[1] == '--list':
        list_items()
    elif sys.argv[1] == '-u' or sys.argv[1] == '--update':
        try:
            update_database()
        except FileNotFoundError:
            print("No config file found.")
    else:
        print_usage()

    with open(db_location + db_name, 'wb') as f:
        pickle.dump(items, f)
